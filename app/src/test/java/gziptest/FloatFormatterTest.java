/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package gziptest;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DynamicNode;
import org.junit.jupiter.api.RepeatedTest;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestFactory;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.common.primitives.Ints;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.DynamicContainer.dynamicContainer;
import static org.junit.jupiter.api.DynamicTest.dynamicTest;

import java.util.Arrays;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.stream.IntStream;
import java.util.stream.Stream;

class FloatFormatterTest {

    private final int SIGNSYMBOL = 11;
    private final int DECIMALPOINT = 12;
    private final int REVERSEZERO = 10;

    @TestFactory
    Stream<DynamicNode> constructorTestCase8() {
        return IntStream.range(1,16).boxed()
        .map(inum -> dynamicContainer("iketa: " + inum, IntStream.range(1, 16 - inum).boxed()
            .map(fnum -> dynamicTest("iketa: " + inum + ",fketa: " + fnum, () -> {
                FloatFormatter ff = new FloatFormatter(inum.intValue(), fnum.intValue(), 1, 0);
                int[] d = new int[inum.intValue()+fnum.intValue()+3];
                Arrays.fill(d, -1);
                assertArrayEquals(ff.getDigits(), d);
            }))));
    }
    

    @TestFactory
    Stream<DynamicNode> testA() {
        return IntStream.range(-100, 100).boxed()
        .map(inum -> dynamicTest("f:15, i:" + inum, () -> {
            FloatFormatter ff = new FloatFormatter(inum, 15, 1, 0);
            int[] d = new int[18];
            Arrays.fill(d, -1);
            assertArrayEquals(ff.getDigits(), d);
        }
        ));
    }

    @ParameterizedTest
    @ValueSource(ints = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, Integer.MAX_VALUE})
    void prioritizeFketaOverIketaConstructorTest(int candidate) {
        FloatFormatter ff = new FloatFormatter(Integer.MAX_VALUE, candidate, 0, 0);
        assertAll(
            () -> assertEquals(15 - ((candidate < 15) ? candidate : 15), ff.getIketa(), ff.getIketa()),
            () -> assertEquals((candidate < 15) ? candidate : 15, ff.getFketa(), ff.getFketa())
        );
    }

    @Test
    void constructorTest() {
        FloatFormatter ff2 = new FloatFormatter(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE,
                Integer.MAX_VALUE);
        assertEquals(15, ff2.getFketa());
        FloatFormatter ff3 = new FloatFormatter(Integer.MAX_VALUE, Integer.MIN_VALUE, Integer.MAX_VALUE,
                Integer.MAX_VALUE);
        assertEquals(15, ff3.getIketa());
        FloatFormatter ff4 = new FloatFormatter(Integer.MAX_VALUE, 10, Integer.MAX_VALUE, Integer.MAX_VALUE);
        assertAll(
                () -> assertEquals(5, ff4.getIketa()),
                () -> assertEquals(10, ff4.getFketa()));
    }

    @Test
    void randomValueTest() {
        FloatFormatter ff = new FloatFormatter(2, 4, 1, 2);
        int[] d = new int[ff.getDigits().length];
        Arrays.fill(d, -1);
        assertArrayEquals(ff.getDigits(), d);
        assertArrayEquals(ff.calcuateAndGetDigits(0.23),
                new int[] { -1, SIGNSYMBOL, REVERSEZERO, 0, DECIMALPOINT, 2, 3, 0, 0 });
        assertArrayEquals(ff.calcuateAndGetDigits(10.2303),
                new int[] { -1, SIGNSYMBOL, 1, 0, DECIMALPOINT, 2, 3, 0, 2 });

    }

    @Test
    void randomValue3Test() {
        FloatFormatter ff = new FloatFormatter(0, 8, 1, 2);
        int[] d = new int[ff.getDigits().length];
        Arrays.fill(d, -1);
        assertArrayEquals(ff.calcuateAndGetDigits(1.20402001),
                new int[] { -1, SIGNSYMBOL, DECIMALPOINT, 2, 0, 4, 0, 2, 0, 0, 1 });
        assertArrayEquals(ff.calcuateAndGetDigits(10.23030009),
                new int[] { -1, SIGNSYMBOL, DECIMALPOINT, 2, 3, 0, 3, 0, 0, 0, 9 });

    }

    @ParameterizedTest
    @ValueSource(doubles = { 0, 1, 2 })
    void allZeroConstructorTest(double candidate) {
        FloatFormatter ff = new FloatFormatter(0, 0, 0, 0);
        int[] d = new int[1];
        d[0] = -1;
        assertArrayEquals(ff.getDigits(), d);
        ff.calcuateAndGetDigits(0.00);
        assertArrayEquals(ff.getDigits(), d);
        assertArrayEquals(ff.calcuateAndGetDigits(candidate), d);
    }

    @Test
    void allNegativeConstructorTest() {
        FloatFormatter ff = new FloatFormatter(-1, -1, -1, -1);
        int[] d = new int[1];
        d[0] = -1;
        assertArrayEquals(ff.getDigits(), d);
    }

    @Test
    public void noFloatNumberConstructorTest() {
        FloatFormatter ff = new FloatFormatter(4, 0, 0, 0);
        int[] d = new int[5];
        Arrays.fill(d, -1);
        assertArrayEquals(ff.getDigits(), d);
    }

    @Test
    public void someTest() {
        FloatFormatter ff = new FloatFormatter(3, 1, 1, 1);
        int[] d = { -1, SIGNSYMBOL, 0, 1, 2, DECIMALPOINT, 3 };
        assertArrayEquals(d, ff.calcuateAndGetDigits(12.34567));
    }

}
